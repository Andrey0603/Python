# def hello(name):
#     return f"Hello,{name}"

# def bye(name):
#     return f"{name},bye-bye"

# def create_phrase(func):
#     name = input ( "Введите ваше имя ")
#     return func(name)

# # print(create_phrase(hello))
# # print(create_phrase(bye))

# def create_two_phrases(funcs):
#     name = input ( "Введите ваше имя ")
#     res = " "
#     for func in funcs:
#         res += func(name) + " \n"
#     return res
# funcs =(hello,bye)
# print(create_two_phrases(funcs))



# # Этот код на Python демонстрирует концепцию замыкания (closure)
# # - это когда функция
# # вложена в другую функцию и использует переменные внешней функции. 
# def calc_power(degree): # Сначала у нас есть объявление функции calc_power, которая принимает один аргумент degree. 
#     def power(base): # Внутри calc_power есть вложенная функция power, которая принимает один аргумент base и возвращает base в степени degree. 
#         return base ** degree
#     return power #Функция calc_power возвращает вложенную функцию power. 

# print(calc_power(3)(2)) #Затем происходит вызов функции calc_power с аргументом 3, что создает замыкание - функция power теперь "запоминает" значение degree равное 3.
#                         # Наконец, мы вызываем возвращенную функцию power с аргументом 2. 
# #Таким образом, когда мы вызываем calc_power(3)(2), сначала создается функция, 
# # которая возводит число в степень 3, и затем это число возводится в степень 2, и возвращается результат, то есть 2 возводится в 3-ю степень, 
# # а затем этот результат возводится во 2-ю степень, что даст 8.

# cube  = calc_power(3)
# square = calc_power(2)
# print(cube(3))
# print(square(9))


# square_even = lambda x: x**2 if x%2 else 0

# print(square_even(9))
# print(square_even(0))


# calculator = { "+": lambda x,y: x + y,
              
#                "-": lambda x,y: x - y,
#                "*": lambda x,y: x * y,
#                "/": lambda x,y: x / y }

# # s = input("Введите арифметическое выражение  ")
# # x, op, y = s.split()
# # print(f" Результат равен {calculator[op] (int(x) , int(y) )}")

# print(sp := [ i for i in range(10)]) #- Здесь используется оператор присваивания := (walrus operator), который добавлен в Python 3.8. Этот оператор присваивает значение одновременно с вычислением выражения. 
#                                      # - Таким образом, переменной sp присваивается список [i for i in range(10)], что означает создание списка, содержащего числа от 0 до 9.
# print(list(map(lambda x: x**2, sp))) # Здесь используется функция map, которая применяет заданную функцию (в данном случае лямбда-функцию, возводящую число в квадрат) ко всем элементам списка sp.
#                                      #- Результатом будет новый итерируемый объект, поэтому с помощью list() оборачивается результат в список для вывода.
# print(list(map(lambda x: x**2 if x%2 else 0, sp))) # - Этот код также использует функцию map, но здесь применяется лямбда-функция, которая возводит число в квадрат, если число нечетное (это делается с помощью x**2 if x%2 else 0).
#                                                    #    - Если число четное, результатом будет 0.
                                                   #    - Результат затем преобразуется в список для вывода.
                                                   
# Задача №47
# У вас есть код, который вы не можете менять (так часто бывает, когда код в глубине
# программы используется множество раз и вы не хотите ничего сломать):
# transformation = <???>
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
# transormed_values = list(map(transformation, values))
# Единственный способ вашего взаимодействия с этим кодом - посредством задания
# функции transformation.
# Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать
# список значений, а нужно получить его как есть.
# Напишите такое лямбда-выражение transformation, чтобы transformed_values получился
# копией values           

# values = [1, 23, 42, "asdfg"]
# transformed_values = list(map(lambda x: x, values))
# if values == transformed_values:
#  print("ok")
# else:
#  print("fail")  


# Задача №49. Решение в группах
# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая
# планета ровно одна


# def find_farthest_orbit(list_of_orbits): #Это объявление функции «findfarthestorbit», которая принимает в качестве аргумента список орбит.
#     return max(list_of_orbits, key=lambda s: s[0] * s[1] if s[0] != s[1] else 0) #Здесь используется функция max, которая находит максимальный элемент 
#                                                                                  #в списке list_of_orbits с использованием ключа, предоставленного в виде лямбда-функции. 
#                                                                                  # Лямбда-функция принимает элемент s (орбиту) и возвращает произведение её параметров
#                                                                                  # s[0] * s[1], если s[0] не равно s[1] (то есть орбита не является круговой), иначе возвращает 0.

# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)] #Это список орбит с заданными параметрами (ширина и высота).
# print(*find_farthest_orbit(orbits)) #Вызывается функция find_farthest_orbit с аргументом orbits, и результат выводится на экран. 
#                                     #Результатом будет самая дальняя орбита в соответствии с логикой, описанной в лямбда-функции.
# #Таким образом, код находит самую дальнюю орбиту из списка орбит, используя логику, описанную в лямбда-функции внутри функции find_farthest_orbit.


# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)] 
# sp = list(map(lambda item: item [0] * item [1] if item [0] != item[1] else 0, orbits))
# print(orbits[sp.index(max(sp))])

#  Задача №51. Решение в группах
# Напишите функцию same_by(characteristic, objects), которая
# проверяет, все ли объекты имеют одинаковое значение
# некоторой характеристики, и возвращают True, если это так.
# Если значение характеристики для разных объектов
# отличается - то False. Для пустого набора объектов, функция
# должна возвращать True. Аргумент characteristic - это
# функция, которая принимает объект и вычисляет его
# характеристику.

#    Ввод:                                               Вывод:
# values = [0, 2, 10, 6]                                  same
# if same_by(lambda x: x % 2, values):
# print(‘same’)
# else:
# print(‘different’)   


# def same_by(characteristic, objects):
#     if not objects:  # Проверяем, что набор объектов не пустой
#         return True
#     else:
#         values = set()  # Создаем множество для хранения уникальных значений характеристики
#         for obj in objects:
#             value = characteristic(obj)  # Вычисляем значение характеристики для каждого объекта
#             if value in values:  # Проверяем, есть ли уже такое значение в множестве
#                 continue  # Если такое значение уже есть, переходим к следующему объекту
#             else:
#                 values.add(value)  # Добавляем новое значение характеристики в множество
#         return len(values) == 1  # Если в множестве есть только одно уникальное значение, возвращаем True, иначе False

# values = [0, 2, 10, 6]
# if same_by(lambda x: x % 2, values):
#     print('same')
# else:
#     print('different')    
    
    
    
# def same_by(characteristic, objects): #- Это объявление функции same_by, которая принимает два аргумента: characteristic (характеристика)
#                                     #- это функция, которая вычисляет характеристику объекта, и objects (объекты) - это список объектов, для которых мы хотим выполнить проверку.
#      return len(objects)== 0 or len (set(map(characteristic,objects )))==1 #- Возвращает результат проверки, соответствует ли количество уникальных характеристик объектов в списке objects одному значению.
#  #Если список objects пустой (len(objects) == 0), то результатом будет True. В противном случае, используется функция map для применения функции characteristic к каждому объекту в списке,
#  # затем создается множество из результирующих характеристик, и проверяется количество уникальных значений в множестве.
#  #Если уникальное значение ровно одному, тогда возвращается True, иначе False.
# values = [0, 2, 10, 6] #- Это определение списка values с заданными значениями.
# if same_by(lambda x: x % 2, values): #- Вызывается функция same_by, в которую передается лямбда-функция `lambda x: x % 2`, которая вычисляет остаток от деления x на 2 для каждого элемента. Если все элементы имеют одинаковый остаток от деления на 2, условие выполняется, и выводится 'same'.
# #Таким образом, данная функция проверяет, имеют ли все объекты в списке objects одинаковое значение характеристики, вычисленное с помощью функции characteristic.
#     print('same')
 
 
 